#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman charter
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine natbib_authoryear
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Integral Images and Applications to Image Processing
\end_layout

\begin_layout Author
Praveen Venkatesh
\begin_inset Newline newline
\end_inset

EE10B028
\end_layout

\begin_layout Abstract
One of the many tools that are extremely useful in image processing is the
 idea of integral images — an algorithm based on dynamic programming — that
 is used to efficiently sum the intensities of all pixels in a rectangular
 window.
 This operation finds heavy usage in the area of pattern matching for object
 detection (the well-known Viola-Jones object detection framework was the
 first to use it for this purpose).
 In image processing, the speed of any algorithm is of high importance because
 the size of the input is extremely large (consider ~
\begin_inset Formula $1024\times768$
\end_inset

 pixels).
 The problem is as follows: in order to perform detection, we use filters
 that add and subtract pixels in various rectangular windows.
 These windows need to be translated over the entire image, and the operation
 repeated in each configuration.
 Consider a 
\begin_inset Formula $k\times k$
\end_inset

 window in an 
\begin_inset Formula $n\times n$
\end_inset

 image (
\begin_inset Formula $k\ll n$
\end_inset

).
 A naive implementation would involve iterating through nearly 
\begin_inset Formula $n^{2}$
\end_inset

 rectangles, summing 
\begin_inset Formula $k^{2}$
\end_inset

 pixels each time.
 Integral images reduces this to a one-time 
\begin_inset Formula $\mathcal{O}(n^{2})$
\end_inset

 cost, following which the task of summing pixels within any window is a
 constant time operation.
 The complexity is therefore linear in the number of pixels.
\end_layout

\end_body
\end_document
